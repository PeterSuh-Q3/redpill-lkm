name: Build LKM for DSM 7.3 (robust)

on:
  workflow_dispatch:
    inputs:
      platform:
        description: "Synology platform (apollolake, denverton, epyc7002, geminilakenk, v1000nk, r1000nk)"
        required: true
        type: string
      module_symvers_headers_url:
        description: "URL to tar.gz containing Module.symvers and include/ headers extracted from DSM 7.3 device"
        required: false
        type: string
      lkm_target:
        description: "Make target (default: modules)"
        required: false
        type: string
        default: "modules"

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      VERSION_PRIMARY: "7.3"
      VERSION_FALLBACK: "7.2"
      UNAME_R_44: "4.4.302+"
      UNAME_R_510: "5.10.55+"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y git xz-utils tar rsync bc make gcc g++ libncurses-dev libssl-dev perl pkg-config jq

      - name: Clone pkgscripts-ng (7.3 → fallback 7.2)
        run: |
          set -eux
          git clone https://github.com/SynologyOpenSource/pkgscripts-ng.git pkgscripts-ng
          cd pkgscripts-ng
          git checkout "DSM${VERSION_PRIMARY}" || git checkout "DSM${VERSION_FALLBACK}"

      - name: Deploy chroot via EnvDeploy (7.3 → fallback 7.2)
        run: |
          set -eux
          cd pkgscripts-ng
          sudo ./EnvDeploy -v "${VERSION_PRIMARY}" -p "${{ inputs.platform }}" || \
          sudo ./EnvDeploy -v "${VERSION_FALLBACK}" -p "${{ inputs.platform }}"
          # expose env path
          echo "ENV_PATH=$GITHUB_WORKSPACE/build_env/ds.${{ inputs.platform }}-${VERSION_PRIMARY}" >> $GITHUB_ENV
          # if primary fails, try fallback path
          if [ ! -d "$GITHUB_WORKSPACE/build_env/ds.${{ inputs.platform }}-${VERSION_PRIMARY}" ]; then
            echo "ENV_PATH=$GITHUB_WORKSPACE/build_env/ds.${{ inputs.platform }}-${VERSION_FALLBACK}" >> $GITHUB_ENV
          fi

      - name: Prepare KSRC and inject kernel material
        run: |
          set -eux
          ENV_PATH="${ENV_PATH}"
          
          # Copy pkgscripts-ng into chroot
          sudo cp -a pkgscripts-ng "${ENV_PATH}/pkgscripts-ng"
          
          # Create an inject dir for Module.symvers/headers
          sudo mkdir -p "${ENV_PATH}/kernel-inject"
          
          # If URL provided, fetch and extract (use real >>/&&, not HTML entities)
          if [ -n "${module_symvers_headers_url:-}" ]; then
            curl -L --retry 3 -o "${ENV_PATH}/kernel-inject.tar.gz" "${module_symvers_headers_url}"
            sudo tar -xzf "${ENV_PATH}/kernel-inject.tar.gz" -C "${ENV_PATH}/kernel-inject"
          else
            echo "No module_symvers_headers_url provided -> skipping kernel-inject fetch"
          fi
          
          # Patch + Build inside chroot
          sudo chroot "${ENV_PATH}" /bin/bash -c '
            set -eux
            cd pkgscripts-ng
          
            # Insert lines after "PLATFORM_FAMILY" (literal $KERNEL_SEARCH_PATH and $file)
            awk '"'"'
              /PLATFORM_FAMILY/ {
                print;
                print "\techo \"KSRC=\\$KERNEL_SEARCH_PATH\" >> \\$file";
                print "\techo \"LINUX_SRC=\\$KERNEL_SEARCH_PATH\" >> \\$file";
                next
              }
              { print }
            '"'"' include/build > include/build.new
            mv include/build.new include/build
          
            ./SynoBuild -c -p "epyc7002"
          
            if [ -f "/env${BUILD_ARCH}.mak" ]; then
              while read -r line; do
                [ "${line:0:1}" != "#" ] && export "${line%%=*}"="${line#*=}"
              done < /env${BUILD_ARCH}.mak || true
            fi
          
            : "${KSRC:=}"; : "${KERNEL_SEARCH_PATH:=}"
            if [ -z "${KSRC:-}" ] && [ -n "${KERNEL_SEARCH_PATH:-}" ]; then
              export KSRC="${KERNEL_SEARCH_PATH}"
            fi
            if [ -z "${KSRC:-}" ] || [ ! -f "${KSRC}/Makefile" ]; then
              echo "ERROR: KSRC not resolved or missing Makefile (KSRC=${KSRC:-unset})" >&2
              exit 1
            fi
          
            if grep -q -- "--param=allow-store-data-races=0" "${KSRC}/Makefile"; then
              sed -i "s/--param=allow-store-data-races=0/--allow-store-data-races/g" "${KSRC}/Makefile"
            fi
          
            # Inject kernel materials if present
            if [ -f "/kernel-inject/Module.symvers" ]; then
              cp -f /kernel-inject/Module.symvers "${KSRC}/Module.symvers"
            fi
            if [ -d "/kernel-inject/include" ]; then
              rsync -a /kernel-inject/include/ "${KSRC}/include/"
            fi
          
            echo "KSRC=${KSRC}"      >> /env${BUILD_ARCH}.mak
            echo "LINUX_SRC=${KSRC}" >> /env${BUILD_ARCH}.mak
          '
          
          # (이후 빌드/검증 스텝에서)
          # - 5.10 계열은 5.10.55 또는 5.10.55+가 나올 수 있으니 둘 다 허용
          # - 4.4 계열은 4.4.302+를 체크
          gunzip -c redpill.ko.gz > /tmp/redpill.ko
          VMAGIC="$(/sbin/modinfo --field=vermagic /tmp/redpill.ko | awk '{print $1}')"
          case "$VMAGIC" in
            4.4.302+|5.10.55|5.10.55+)
              echo "OK vermagic=$VMAGIC" ;;
            *)
              echo "Unexpected vermagic: $VMAGIC"; exit 1 ;;
          esac
      - name: Build LKM inside chroot
        run: |
          set -eux
          ENV_PATH="${ENV_PATH}"
          sudo chroot "${ENV_PATH}" /bin/bash -c '
            set -eux
            # Unset custom CFLAGS/CXXFLAGS from env to avoid ABI drift
            sed -i "s/^CFLAGS=/#CFLAGS=/g; s/^CXXFLAGS=/#CXXFLAGS=/g" /env${BUILD_ARCH}.mak
            while read -r line; do [ "${line:0:1}" != "#" ] && export "${line%%=*}"="${line#*=}"; done < /env${BUILD_ARCH}.mak || true

            mkdir -p /source/input /source/output
            # Bring current repo into chroot
            cp -a /pkgscripts-ng/../ /source/input
            cd /source/input
            # Ensure env.mak inclusion
            grep -q "env.mak" Makefile || sed -i "1 i include /env.mak" Makefile

            # Choose lkm repo automatically for 5.10.x
            KVER_MAJOR="$(cat ${KERNEL_SEARCH_PATH}/Makefile | grep ^VERSION | awk "{print \$3}")"
            KVER_MINOR="$(cat ${KERNEL_SEARCH_PATH}/Makefile | grep ^PATCHLEVEL | awk "{print \$3}")"
            KVER="${KVER_MAJOR}.${KVER_MINOR}"

            REPO="${{ github.server_url }}/${{ github.repository }}"
            if [ "$KVER" = "5.10" ]; then
              REPO="https://github.com/AuxXxilium/redpill-lkm5"
            fi

            git clone -c http.sslVerify=false "$REPO" /source/lkm
            cd /source/lkm

            array=(${{ inputs.lkm_target }})
            # If your project uses multiple targets, split them (prod-v7 etc.)
            # array=(${ { matrix.parm } })  # keep original style for matrix case

            for a in ${array[@]}; do
              PLATFORM="${{ inputs.platform }}" make -j"$(nproc)" CC="$CC" "$a"
              # verify & package
              MOD="$(find . -maxdepth 1 -name "*.ko" | head -n1)"
              [ -n "$MOD" ] || { echo "No .ko built"; exit 1; }
              VMAGIC="$(/sbin/modinfo --field=vermagic "$MOD" | awk "{print \$1}")"
              case "$VMAGIC" in
                4.4.302+|5.10.55+) echo "OK vermagic=$VMAGIC";;
                *) echo "Unexpected vermagic: $VMAGIC"; exit 1;;
              esac
              strip -g "$MOD" || true
              gzip -f "$MOD"
              mv -f "$MOD.gz" /source/output/rp-${{ inputs.platform }}-${VMAGIC//+/}-${a%*-}.ko.gz
              make clean
            done
            ls -al /source/output
          '

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lkm-${{ inputs.platform }}
          path: build_env/ds.${{ inputs.platform }}-${{ env.VERSION_PRIMARY }}/source/output/*.ko.gz

#
# Copyright (C) 2022 Ing <https://github.com/wjz304>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: Extract and Build Synology Toolkit

on:  
  workflow_dispatch:
    inputs:
      version:
        description: "format %y.%-m.$i or auto"
        required: false
        type: string
      prerelease:
        description: "pre release"
        default: false
        type: boolean

jobs:
  build:
    strategy:
      matrix:
        include:
          - version: 7.2
            platform: r1000nk

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Init Env
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          sudo timedatectl set-timezone "Asia/Seoul"
          
      - name: Get EnvDeploy and SynoBuild
        run: |
          ROOT_PATH=${{ github.workspace }}
          VERSION=${{ matrix.version }}
          PLATFORM=${{ matrix.platform }}
          
          # Clone pkgscripts-ng
          git clone https://github.com/SynologyOpenSource/pkgscripts-ng.git ${ROOT_PATH}/pkgscripts-ng
          cd ${ROOT_PATH}/pkgscripts-ng
          
          # Checkout appropriate version
          git checkout DSM$VERSION`[ "$VERSION" = "6.2" ] && echo ".4"`
          
          # Show available platforms
          sudo ./EnvDeploy -v $VERSION`[ "$VERSION" = "6.2" ] && echo ".4"` -l
          
          # Deploy environment
          sudo ./EnvDeploy -q -v $VERSION -p $PLATFORM
          
          # Fault tolerance for specific platform/version combinations
          if [[ "$PLATFORM" == "broadwellntbap" && "$VERSION" == "7.1" ]]; then
            sed -i '/broadwellnk	BROADWELLNK/a\		broadwellntbap  BROADWELLNTBAP                  linux-4.4.x             Intel Broadwell with ntb kernel config in AP mode' ${ROOT_PATH}/pkgscripts-ng/include/platforms
          fi
          
          # Set environment path
          ENV_PATH=${ROOT_PATH}/build_env/ds.$PLATFORM-$VERSION
          
          # Copy pkgscripts-ng to environment
          sudo cp -al ${ROOT_PATH}/pkgscripts-ng ${ENV_PATH}/

      - name: Run SynoBuild Process
        run: |
          ROOT_PATH=${{ github.workspace }}
          VERSION=${{ matrix.version }}
          PLATFORM=${{ matrix.platform }}
          ENV_PATH=${ROOT_PATH}/build_env/ds.$PLATFORM-$VERSION
          
          # Run SynoBuild inside chroot environment
          sudo chroot ${ENV_PATH} << "EOF"
          cd pkgscripts
          
          # Modify ProjectDepends.py for newer versions
          version=${{ matrix.version }}
          [ ${version:0:1} -gt 6 ] && sed -i 's/print(" ".join(kernels))/pass #&/' ProjectDepends.py
          
          # Add environment variables to build config
          sed -i '/PLATFORM_FAMILY/a\\techo "PRODUCT=$PRODUCT" >> $file\n\techo "KSRC=$KERNEL_SEARCH_PATH" >> $file\n\techo "LINUX_SRC=$KERNEL_SEARCH_PATH" >> $file' include/build
          
          # Run SynoBuild
          ./SynoBuild -c -p ${{ matrix.platform }} ${{ matrix.platform }}
          
          # List /opt directory to verify SynoBuild results
          echo "Contents of /opt directory:"
          ls -la /opt/
          EOF

      - name: Archive Toolkit Result
        run: |
          ROOT_PATH=${{ github.workspace }}
          VERSION=${{ matrix.version }}
          PLATFORM=${{ matrix.platform }}
          
          # Create output directory
          mkdir -p ${ROOT_PATH}/toolkit-output
          
          # Set environment path
          ENV_PATH="${ROOT_PATH}/build_env/ds.$PLATFORM-$VERSION"
          
          # Archive the toolkit from the chroot environment
          sudo chroot ${ENV_PATH} << "EOF"
          cd /opt
          
          # Look for the correct toolkit directory (platform name only)
          if [ -d "${{ matrix.platform }}" ]; then
            echo "Found toolkit directory: /opt/${{ matrix.platform }}"
            tar -czf /tmp/ds.${{ matrix.platform }}-${{ matrix.version }}-toolkit.tgz ${{ matrix.platform }}/
            echo "Archived toolkit directory to /tmp/ds.${{ matrix.platform }}-${{ matrix.version }}-toolkit.tgz"
            ls -lah /tmp/ds.${{ matrix.platform }}-${{ matrix.version }}-toolkit.tgz
          elif [ -d "ds.${{ matrix.platform }}-${{ matrix.version }}" ]; then
            echo "Found toolkit directory: /opt/ds.${{ matrix.platform }}-${{ matrix.version }}"
            tar -czf /tmp/ds.${{ matrix.platform }}-${{ matrix.version }}-toolkit.tgz ds.${{ matrix.platform }}-${{ matrix.version }}/
            echo "Archived toolkit directory to /tmp/ds.${{ matrix.platform }}-${{ matrix.version }}-toolkit.tgz"
            ls -lah /tmp/ds.${{ matrix.platform }}-${{ matrix.version }}-toolkit.tgz
          else
            echo "Toolkit directory not found in /opt"
            echo "Available directories in /opt:"
            ls -la /opt/
            # Try to create archive of all contents in /opt for debugging
            tar -czf /tmp/ds.${{ matrix.platform }}-${{ matrix.version }}-toolkit-all.tgz *
            echo "Created backup archive of all /opt contents"
            ls -lah /tmp/ds.${{ matrix.platform }}-${{ matrix.version }}-toolkit-all.tgz
          fi
          EOF
          
          # Copy archive out of chroot environment - try different possible filenames
          if [ -f "${ENV_PATH}/tmp/ds.$PLATFORM-$VERSION-toolkit.tgz" ]; then
            sudo cp ${ENV_PATH}/tmp/ds.$PLATFORM-$VERSION-toolkit.tgz ${ROOT_PATH}/toolkit-output/
          elif [ -f "${ENV_PATH}/tmp/ds.$PLATFORM-$VERSION-toolkit-all.tgz" ]; then
            sudo cp ${ENV_PATH}/tmp/ds.$PLATFORM-$VERSION-toolkit-all.tgz ${ROOT_PATH}/toolkit-output/ds.$PLATFORM-$VERSION-toolkit.tgz
          fi
          
          # Change ownership
          sudo chown -R $(whoami):$(whoami) ${ROOT_PATH}/toolkit-output/
          
          # Verify archive
          echo "Archive created:"
          ls -lah ${ROOT_PATH}/toolkit-output/

      - name: Upload to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: synology-toolkit-${{ matrix.platform }}-${{ matrix.version }}
          path: |
            ${{ github.workspace }}/toolkit-output/*

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 0

      - name: Changelog
        uses: Bullrich/generate-release-changelog@master
        id: Changelog
        env:
          REPO: ${{ github.repository }}

      - name: Init Env
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          sudo timedatectl set-timezone "Asia/Seoul"
          
      - name: Download from Artifacts
        uses: actions/download-artifact@v4
        with:
          name: synology-toolkit-r1000nk-7.2
          path: ./toolkit-files

      - name: Calculate Version
        run: |
          # Calculate Version
          VERSION=""
          if [ -n "${{ inputs.version }}" ]; then
            VERSION="${{ inputs.version }}"
          else
            LATEST_TAG="$(curl -skL "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r ".tag_name" 2>/dev/null)"
            if [[ -n "${LATEST_TAG}" && "`echo ${LATEST_TAG} | cut -d '.' -f 1,2`" = "`date +'%y.%-m'`" ]]; then
              VERSION="`echo ${LATEST_TAG} | awk -F '.' '{$3=$3+1}1' OFS='.'`"
            else
              VERSION="`date +'%y.%-m.%-d'`"
            fi
          fi
          if [ -n "${VERSION}" ]; then
            echo "Version: ${VERSION}"
            echo "${VERSION}" > VERSION
            echo "${VERSION}" > "./toolkit-files/VERSION"
            echo "VERSION=${VERSION}" >> $GITHUB_ENV
          fi

      - name: Create Release
        if: env.VERSION != ''
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          name: Synology Toolkit r1000nk v${{ env.VERSION }}
          body: |
            ## Synology Development Toolkit r1000nk-7.2
            
            이 릴리스에는 Synology r1000nk 플랫폼용 DSM 7.2 개발 툴킷이 포함되어 있습니다.
            
            ### 포함된 내용
            - 크로스 컴파일 툴체인
            - 헤더 파일 및 라이브러리
            - 빌드 환경 설정
            - 커널 소스 및 모듈 개발 도구
            
            ### 사용법
            ```bash
            # 압축 해제
            tar -xzf ds.r1000nk-7.2-toolkit.tgz
            
            # 툴킷 활용 (압축 해제 후 r1000nk 디렉토리 사용)
            cd r1000nk/
            # 또는 /opt/r1000nk/ 경로에 복사 후 개발 작업 수행
            ```
            
            ### 주요 변경사항
            - `/opt/r1000nk/` 경로로 수정된 툴킷 구조
            - DSM 7.2 호환 개발 환경
            - r1000nk 플랫폼 특화 빌드 도구
            
            ${{ steps.Changelog.outputs.changelog }}
          files: |
            ./toolkit-files/*
          prerelease: ${{ inputs.prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

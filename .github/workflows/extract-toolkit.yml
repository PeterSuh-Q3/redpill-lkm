name: Extract Synology Toolchain

on:
  workflow_dispatch:
    inputs:
      version:
        description: "format %y.%-m.$i or auto"
        required: false
        type: string
      prerelease:
        description: "pre release"
        default: false
        type: boolean

jobs:
  build:
    strategy:
      matrix:
        include:
          - version: 7.2
            platform: r1000nk

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Init Env
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          sudo timedatectl set-timezone "Asia/Seoul"

      - name: Get EnvDeploy
        run: |
          ROOT_PATH=${{ github.workspace }}
          VERSION=${{ matrix.version }}
          PLATFORM=${{ matrix.platform }}

          # Clone Synology pkgscripts-ng and deploy environment
          git clone https://github.com/SynologyOpenSource/pkgscripts-ng.git ${ROOT_PATH}/pkgscripts-ng
          cd ${ROOT_PATH}/pkgscripts-ng
          git checkout DSM${VERSION}`[ "$VERSION" = "6.2" ] && echo ".4"`
          sudo ./EnvDeploy -q -v $VERSION -p $PLATFORM

      - name: Archive Cross-Compiler
        run: |
          ROOT_PATH=${{ github.workspace }}
          VERSION=${{ matrix.version }}
          PLATFORM=${{ matrix.platform }}
          ENV_PATH=${ROOT_PATH}/build_env/ds.$PLATFORM-$VERSION

          mkdir -p ${ROOT_PATH}/toolchain-output

          # Inside chroot, tar the cross-compiler directory
          sudo chroot ${ENV_PATH} << "EOF"
          tar -czf /tmp/${PLATFORM}-linux-gnu-${VERSION}-toolchain.tgz /usr/local/${PLATFORM}-linux-gnu/
          EOF

          sudo cp ${ENV_PATH}/tmp/${PLATFORM}-linux-gnu-${VERSION}-toolchain.tgz ${ROOT_PATH}/toolchain-output/
          sudo chown $(whoami):$(whoami) ${ROOT_PATH}/toolchain-output/${PLATFORM}-linux-gnu-${VERSION}-toolchain.tgz

          echo "Archive created:"
          ls -lah ${ROOT_PATH}/toolchain-output/

      - name: Upload to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: synology-toolchain-${{ matrix.platform }}-${{ matrix.version }}
          path: |
            ${{ github.workspace }}/toolchain-output/*

  release:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 0

      - name: Changelog
        uses: Bullrich/generate-release-changelog@master
        id: Changelog
        env:
          REPO: ${{ github.repository }}

      - name: Download Toolchain Artifact
        uses: actions/download-artifact@v4
        with:
          name: synology-toolchain-r1000nk-7.2
          path: ./toolchain-files

      - name: Calculate Version
        run: |
          VERSION=""
          if [ -n "${{ inputs.version }}" ]; then
            VERSION="${{ inputs.version }}"
          else
            LATEST_TAG="$(curl -skL "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r ".tag_name" 2>/dev/null)"
            if [[ -n "${LATEST_TAG}" && "`echo ${LATEST_TAG} | cut -d '.' -f 1,2`" = "`date +'%y.%-m'`" ]]; then
              VERSION="`echo ${LATEST_TAG} | awk -F '.' '{$3=$3+1}1' OFS='.'`"
            else
              VERSION="`date +'%y.%-m.%-d'`"
            fi
          fi
          echo "Version: ${VERSION}"
          echo "${VERSION}" > VERSION
          echo "${VERSION}" > "./toolchain-files/VERSION"
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Create Release
        if: env.VERSION != ''
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          name: Synology Toolchain r1000nk v${{ env.VERSION }}
          body: |
            ## Synology Cross-Compiler Toolchain r1000nk-7.2

            이 릴리스에는 Synology r1000nk 플랫폼용 DSM ${{ env.VERSION }} 크로스 컴파일 툴체인이 포함되어 있습니다.

            ### 포함된 내용
            - 크로스 컴파일러 바이너리 (`/usr/local/r1000nk-linux-gnu/`)
            - 라이브러리 및 헤더 파일
            - 빌드 스크립트 및 환경 설정

            ### 사용법
            ```
            # 압축 해제
            tar -xzf r1000nk-linux-gnu-${{ env.VERSION }}-toolchain.tgz

            # 툴체인 환경 설정
            export TOOLCHAIN=/path/to/r1000nk-linux-gnu-${{ env.VERSION }}
            export PATH="$TOOLCHAIN/bin:$PATH"
            ```

            ${{ steps.Changelog.outputs.changelog }}
          files: |
            ./toolchain-files/*
          prerelease: ${{ inputs.prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}```
